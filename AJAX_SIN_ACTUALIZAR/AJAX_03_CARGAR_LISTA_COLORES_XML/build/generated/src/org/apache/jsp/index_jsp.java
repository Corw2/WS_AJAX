package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List<String> _jspx_dependants;

  private org.glassfish.jsp.api.ResourceInjector _jspx_resourceInjector;

  public java.util.List<String> getDependants() {
    return _jspx_dependants;
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;

    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;
      _jspx_resourceInjector = (org.glassfish.jsp.api.ResourceInjector) application.getAttribute("com.sun.appserv.jsp.resource.injector");

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("\n");
      out.write("    <head>\n");
      out.write("        \n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("        \n");
      out.write("        <script type=\"text/javascript\">\n");
      out.write("            \n");
      out.write("            var negociador;             // EL NEGOCIADOR AJAX.\n");
      out.write("            var xml;                    // LA RESPUESTA XML DEL SERVIDOR.\n");
      out.write("\n");
      out.write("\n");
      out.write("            function f_crearNegociador() {\n");
      out.write("                \n");
      out.write("                if(window.XMLHttpRequest) {\n");
      out.write("                    negociador = new XMLHttpRequest();\n");
      out.write("                } else {\n");
      out.write("                    negociador = new ActiveXObject(\"Microsoft.XMLHTTP\");\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("                if (negociador != null) {\n");
      out.write("                    // CONFIGURAR EL NEGOCIADOR (MODO, URL Y FUNCIÓN DE RETORNO).\n");
      out.write("                    f_configurarNegociador();\n");
      out.write("                    // CONECTAR CON EL SERVIDOR.\n");
      out.write("                    f_conectarNavegadorServidor();\n");
      out.write("                } else {\n");
      out.write("                    return false;\n");
      out.write("                }\n");
      out.write("                \n");
      out.write("            }\n");
      out.write("            \n");
      out.write("\n");
      out.write("\n");
      out.write("            function f_configurarNegociador() {\n");
      out.write("                \n");
      out.write("                // LLAMAMOS AL SERVLET QUE GENERARÁ LA RESPUESTA XML CON LOS COLORES QUE SE NOS PERMITIRÁ USAR.\n");
      out.write("                negociador.open(\"GET\",\"ServletGeneradorXML\");\n");
      out.write("                \n");
      out.write("                // ESTA ES LA FUNCIÓN ANÓNIMA QUE USAREMOS COMO FUNCIÓN DE RETORNO:\n");
      out.write("                negociador.onreadystatechange = function() {\n");
      out.write("                    if (negociador.readyState==4 && negociador.status==200) {\n");
      out.write("                        // AUNQUE ENVIEMOS XML PODEMOS TAMBIÉN LEER SU CONTENIDO CON responseText (no al revés).\n");
      out.write("                        // alert(\"negociador.responseText = \" +  negociador.responseText);\n");
      out.write("                        // \n");
      out.write("                        // DEBE OBTENERSE UN OBJETO Document [object Document]. VIGILAR QUE NO SEA null.\n");
      out.write("                        //alert(\"negociador.responseXML = \" +  negociador.responseXML); // [object XMLDocument].\n");
      out.write("\n");
      out.write("                        // ALMACENAR EL CONTENIDO XML DE LA RESPUESTA EN LA VARIABLE GLOBAL QUE HEMOS DENOMINADO xml.\n");
      out.write("                        xml = negociador.responseXML;\n");
      out.write("\n");
      out.write("                        /* --- PROCESAR LA RESPUESTA XML MEDIANTE DHTML (Dynamic Hyper Text MarkUp Language) ---\n");
      out.write("\n");
      out.write("                                    EL FICHERO XML RECIBIDO EN EL CLIENTE (se escribió todo en 1 línea):\n");
      out.write("            \n");
      out.write("                                    <?xml version='1.0' encoding='UTF-8'?>\n");
      out.write("\n");
      out.write("                                    <raiz>\n");
      out.write("                                        <colores>red</colores>\n");
      out.write("                                        <colores>green</colores>\n");
      out.write("                                        <colores>blue</colores>\n");
      out.write("                                    </raiz>         \n");
      out.write("\n");
      out.write("                        */\n");
      out.write("\n");
      out.write("                        // Obtener el array de elementos <colores> leyendo el contenido de la variable xml. \n");
      out.write("                        // Buscamos por el nombre de la etiqueta. Hay 3 etiquetas de nombre o tipo <colores>.\n");
      out.write("                        // Usamos DHTML y su método getElementsByTagName(\"xxx\").\n");
      out.write("                        \n");
      out.write("                        // Ahora no es document.getElementById(xxx), sino xml.getElementsByTagName(\"xxx\");\n");
      out.write("                        // Se genera Element[] ... un array de elementos.\n");
      out.write("\n");
      out.write("                        var arrayColoresServidor = xml.getElementsByTagName(\"colores\");\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                        // COMENTAREMOS LOS 'alert()' UNA VEZ VERIFICADO QUE SE RECIBE LA RESPUESTA Y ES CORRECTA.\n");
      out.write("                        \n");
      out.write("                        /*\n");
      out.write("                        \n");
      out.write("                        alert(\"arrayColoresServidor = \" + arrayColoresServidor);                                                                               \n");
      out.write("                            // [object HTMLCollection] ... nodeList ... array de <colores>.\n");
      out.write("                            \n");
      out.write("                        alert(\"arrayColoresServidor - primer nodo = \" + arrayColoresServidor[0]);\n");
      out.write("                            // [object Element] ... node ... el primero de los <colores> ... <colores>red</colores>.\n");
      out.write("                            \n");
      out.write("                        alert(\"arrayColoresServidor - primer nodo - primer hijo = \" + arrayColoresServidor[0].firstChild);\n");
      out.write("                            // [object Text] ... nodeText ... red es el contenido, pero es un objeto tipo Text y no sólo una cadena de texto.\n");
      out.write("                            \n");
      out.write("                        alert(\"arrayColoresServidor - primer nodo - primer hijo - valor de su propiedad data/nodeValue = \" + arrayColoresServidor[0].firstChild.data);\n");
      out.write("                            // \"red\" ... su valor es una cadena de texto.\n");
      out.write("\n");
      out.write("                        //alert(\"primer NodeList - .nodeValue = \" + arrayColoresServidor[0].firstChild.nodeValue);  // Valor String del nodo (igual que con .data, pero más antiguo).\n");
      out.write("                        \n");
      out.write("                        */\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                        // EL TEXTO CON EL QUE RELLENAREMOS LA CAJA CENTRAL INFORMATIVA (se irá completando en sucesivas líneas).\n");
      out.write("                        var texto = \"TOTAL COLORES SERVIDOR ... \" + arrayColoresServidor.length + \" <br/>\";\n");
      out.write("\n");
      out.write("                        // Obtener una referencia a la lista desplegable de colores de la página que hasta ahora sólo contenía la opción (<option>) \"ninguno\".\n");
      out.write("                        // AVISO: NO UTILIZAR EL id YA EXISTENTE (listaColores), DEBIÉNDOSE CREAR UNA NUEVA REFERENCIA O NO FUNCIONARÁ BIEN.\n");
      out.write("                        \n");
      out.write("                        var comboListaColores = document.getElementById(\"listaColores\"); // EL COMBO O CONTROL TIPO SELECT-OPTIONS.\n");
      out.write("                        \n");
      out.write("                        \n");
      out.write("                        // MODIFICAR EL CONTENIDO DE LA CAJA DE TEXTO INFORMATIVA Y RELLENAR LA LISTA DE COLORES CON LOS OBTENIDOS DEL SERVIDOR:\n");
      out.write("                        for (var x=0; x < arrayColoresServidor.length; x++) {\n");
      out.write("                                                        \n");
      out.write("                            // Obtener el valor de cada elemento <colores> del xml en formato texto ... \"red\", \"green\", \"blue\".\n");
      out.write("/* -----IMPORTANTE----> */  var valorNodo = arrayColoresServidor[x].firstChild.data;\n");
      out.write("                            \n");
      out.write("                            // Ir generando el texto de la caja central informativa (no confundirla con el combo o lista de selección del color).\n");
      out.write("                            texto += \" [*] COLOR \" + x + \" ... \" + valorNodo + \"<br/>\";\n");
      out.write("\n");
      out.write("                            // *** CREAR LOS NODOS OPTION DENTRO DE LA LISTA HTML ***:\n");
      out.write("                            // Como empezamos en 0, se elimina el <option> original cuyo valor era \"ninguno\".\n");
      out.write("                            // El uso de new crea un nuevo objeto de tipo Option.\n");
      out.write("                            \n");
      out.write("/*comboLista-IMPORTANTE----> */  comboListaColores.options[x] = new Option(valorNodo);\n");
      out.write("\n");
      out.write("                            // Se rellenará la lista select desplegable con:\n");
      out.write("                            //              red\n");
      out.write("                            //              green\n");
      out.write("                            //              blue\n");
      out.write("                            // que son los valores de color (en inglés) con los que podremos colorear el texto,\n");
      out.write("                            // los cuales se han obtenido a través de la consulta AJAX al servidor.\n");
      out.write("\n");
      out.write("                            // !!! LLEGADOS AQUÍ, LA LISTA DE COLORES MOSTRARÁ SUS NUEVAS OPCIONES !!!.\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        // COLOCAR EL TEXTO INFORMATIVO EN LA CAJA CENTRAL.\n");
      out.write("                        document.getElementById(\"cajaTexto\").innerHTML = texto;\n");
      out.write("                        \n");
      out.write("                        // DESHABILITAR EL BOTÓN QUE PERMITE LA CARGA DE LOS COLORES DESDE EL SERVIDOR.\n");
      out.write("                        document.getElementById(\"botonCargarColores\").disabled = true;\n");
      out.write("\n");
      out.write("                    }\n");
      out.write("                    \n");
      out.write("                };\n");
      out.write("                \n");
      out.write("            }\n");
      out.write("            \n");
      out.write("\n");
      out.write("\n");
      out.write("            function f_conectarNavegadorServidor() {\n");
      out.write("                negociador.send(null);\n");
      out.write("            }                                    \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            // SE PEDIRÁ AL SERVIDOR LA LISTA DE COLORES QUE NOS DEVOLVERÁ EN FORMATO XML.\n");
      out.write("            function f_cargarColores_responseXML() {\n");
      out.write("                f_crearNegociador();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            function f_colorearTexto() {\n");
      out.write("\n");
      out.write("                // OBTENER UNA REFERENCIA AL COMBO CON LA LISTA DE COLORES.\n");
      out.write("                var comboListaColores = document.getElementById(\"listaColores\");\n");
      out.write("                \n");
      out.write("                // CONSULTAR CUÁL ES EL COLOR ACTUALMENTE SELECCIONADO (SÓLO PUEDE ELEGIRSE UNO ... size = 1 y NO múltiple).\n");
      out.write("                var colorElegido = comboListaColores.value;\n");
      out.write("\n");
      out.write("                if(colorElegido == \"ninguno\") { // En JavaScript podemos comparar el contenido del texto directamente con ==.\n");
      out.write("                    alert(\" !!! PRIMERO DEBES CARGAR LA LISTA CON LOS COLORES ENTREGADOS POR EL SERVIDOR !!! \");\n");
      out.write("                    return;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                //alert(\"VALOR ELEGIDO PARA COLOREAR ... \" + colorElegido);                       // red, green, blue.\n");
      out.write("                //alert(\"POSICION DEL COLOR ELEGIDO EN LA LISTA ... \" + comboListaColores.selectedIndex);     // 0,1,2 (no lo usaremos en el ejercicio).\n");
      out.write("\n");
      out.write("                // OBTENER UNA REFERENCIA A LA CAJA INFORMATIVA DE TEXTO.\n");
      out.write("                var caja = document.getElementById(\"cajaTexto\");\n");
      out.write("                //alert(\"!!! APLICANDO COLOR ... \" + colorElegido + \" !!!\");\n");
      out.write("                \n");
      out.write("                // MODIFICAR EL ESTILO DE COLOR DE DICHA CAJA A TRAVÉS DE JAVASCRIPT.\n");
      out.write("                // ESTABLECER EL VALOR DE LA PROPIEDAD .style.color.                \n");
      out.write("                caja.style.color = colorElegido;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("        </script>\n");
      out.write("        \n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    <body>\n");
      out.write("        <center>\n");
      out.write("    \n");
      out.write("            <h3 style=\"color:blue\">*** CARGA LOS COLORES EN LA LISTA, ELIGE UNO Y LUEGO PULSA COLOREAR ***</h3>\n");
      out.write("            \n");
      out.write("            <br><br>\n");
      out.write("            \n");
      out.write("            <table border=\"0\" width=\"700\" height=\"50\">\n");
      out.write("                \n");
      out.write("                <tr>\n");
      out.write("                    <td align=\"center\">\n");
      out.write("                            <select id=\"listaColores\" name=\"color\" size=\"1\">\n");
      out.write("                                <!-- SI NO INDICAMOS value PARA EL OPTION, SE COGERÁ EL TEXTO DELIMITADO POR\n");
      out.write("                                        ÉSTE CÓMO PARÁMETRO PARA LA PETICIÓN HTTP ... <option value=\"ninguno\">ninguno</option> -->\n");
      out.write("                                <option>ninguno</option> \n");
      out.write("                            </select>\n");
      out.write("                    </td>\n");
      out.write("                    \n");
      out.write("                    <td align=\"center\">\n");
      out.write("                        <div id=\"cajaTexto\" style=\"font-size:0.5cm;text-align:center;border-style:solid;\">\n");
      out.write("                            !!! SE UTILIZARA LA PROPIEDAD responseXML DEL NEGOCIADOR AJAX !!!\n");
      out.write("                        </div>\n");
      out.write("                    </td>\n");
      out.write("                    \n");
      out.write("                    <td align=\"center\">\n");
      out.write("                        <table>\n");
      out.write("                            <tr>\n");
      out.write("                                <td>\n");
      out.write("                                    <!-- FUNCIÓN JS PARA ACTIVAR LA NEGOCIACIÓN AJAX -->\n");
      out.write("                                    <input type=\"button\" id=\"botonCargarColores\" value=\"CARGAR COLORES XML\" onclick=\"f_cargarColores_responseXML();\"/>\n");
      out.write("                                </td>\n");
      out.write("                            </tr>\n");
      out.write("                            <tr>\n");
      out.write("                                <td>\n");
      out.write("                                    <!-- FUNCIÓN JS PARA COLOREAR EL TEXTO DE LA CAJA -->\n");
      out.write("                                    <input type=\"button\" id=\"botonColorearTexto\" value=\"COLOREAR TEXTO\" onclick=\"f_colorearTexto();\"/>\n");
      out.write("                                </td>\n");
      out.write("                            </tr>\n");
      out.write("                        </table>\n");
      out.write("                    </td>\n");
      out.write("                </tr>\n");
      out.write("            \n");
      out.write("            </table>\n");
      out.write("\n");
      out.write("            <br/><br/>\n");
      out.write("                        \n");
      out.write("        </center>\n");
      out.write("    \n");
      out.write("    </body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          out.clearBuffer();
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
